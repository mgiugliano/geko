# Exponential integrate and fire stochastic point neuron 
# Heun's integration method with exact generation of wh

using PyPlot, Distributions

# model parameters
Rm = 10 #kΩ,
Cm = 1  #μF,
V_thres = 20 # mV
V_reset = 0 # mV
slope = 3 # mV
# tau = Rm*Cm #= 10ms

# integration parameters
h = 10^-2 # ???
h_sqrt = h^0.5
null_steps = 100

# Our exponential IF neuron 
neuron(Vm, I) = ((V_reset - Vm)/Rm + slope/Rm * exp((V_thres -Vm)/slope)+ I)/Cm

# integration
# change gaussian number generator

function integrator(Vm,I,T,sigma)  # I = uA, T = integration time, sigma = ??
    w_steps = T * 100 # integration_time (T, ms) * sampling_rate (100 Hz) 
    M = w_steps * null_steps # total number of steps
    t = 0
    Vm_array = zeros(w_steps+1)
    Vm_array[1] = Vm
    for i in 1:w_steps
        for null in 1:null_steps
            wh = h_sqrt * rand(Normal(0, 1)) * sigma
            k = h * neuron(Vm_array[i], I) + wh
            Vm_array[i+1] = Vm_array[i] + 0.5 * (k + h * neuron(Vm_array[i] + k, I) + wh)
           
            #spiking mechanism
            if Vm_array[i+1] > V_thres
                Vm_array[i+1] = V_reset
            end
            t += h
        end
    end
    return Vm_array
end

function protocol(rest, intensity, stim, relax, sigma) 
    base = integrator(V_reset, 0.0, rest,sigma)
    stimulus = integrator(base[end], intensity,stim, sigma)
    relax = integrator(stimulus[end], 0.0, relax,sigma)

    return vcat(base, stimulus, relax)
end

# experiment # with gaussian noise 10^-1
# experiment = protocol(100, 2.02, 200, 100, 0.0)
# plot(experiment, label=L"2.02 \mu A")

V_thres = -52 # mV
V_reset = -70 # mV

# create a function that repeat the integration for different values of I obtaing the corresponding values of Vm
function IV_curve(min_I,max_I)
    I = min_I:0.1:max_I
    Vm = zeros(length(I))
    for i in 1:length(I)
        Vm[i] = integrator(V_reset, I[i], 100, 0.0)[end]
    end
    return I, Vm
end

current, voltage = IV_curve(-0.5, 1.5)
plot(voltage, current)